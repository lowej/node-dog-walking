
/////////////////////////////////////////////////
//Node controller for serving up the business services to presentation tier
//HTTP RESTful API 

var Dog = require('../../models/dog');
var router = require('express').Router();
var csv = require('express-csv');

//Allows all dogs in DB to be returned - HTTP GET REQUEST
router.get('/api/dogs', function (req, res, next) {
 
	if(null == req.auth){
		console.log('user is not logged in - need to redirect');
		return res.send(401);
	}else{
	    var username = req.auth.username;
		console.log('username is: ' + username);
	}
	
	Dog.find(function(err, dog){
		if(err){return next(err)}
		res.json(dog)
	})
})


//Allows all dogs in DB to be returned - HTTP GET REQUEST
router.get('/api/dogs/csv', function (req, res, next) {
 
	if(null == req.auth){
		console.log('user is not logged in - need to redirect');
		return res.send(401);
	}else{
	    var username = req.auth.username;
		console.log('username is: ' + username);
	}
	
	
	var csvData = new Array();
	var lineCounter=0;
	
	Dog.find(function(err, dog){
		if(err){return next(err)}
		
		
		for(i in dog){
			console.log("have a dog: " + dog[i].dogName);
			var dogWalks = dog[i].walks.walkArray;
			for(j in dogWalks){
				
				if(dogWalks[j].walkDate !== undefined){
					csvData[lineCounter] = new Array();
					csvData[lineCounter][0]=dog[i]._id;
					csvData[lineCounter][1]=dog[i].dogName;
					csvData[lineCounter][2]=dog[i].ownerLastName;
					var dt = dogWalks[j].walkDate;
					csvData[lineCounter][3]=dt.getDate()+'/'+(dt.getMonth()+1)+'/'+dt.getFullYear();
					csvData[lineCounter][4]=dogWalks[j].walkTime;
					console.log('date and time '+ dogWalks[j].walkDate +' '+ dogWalks[j].walkTime);
					lineCounter++;
				}
			}
		}
		
		res.csv(csvData);
	})
	
})


//Returns a single dog based on the dogName passed to it
//Obvious issue with this is if there are more than one dogs with the same name 
//Need to change this to work of unique IDs
router.get('/api/dog', function (req, res, next) {
 
	if(null == req.auth){
		console.log('user is not logged in - need to redirect');
		return res.send(401);
	}else{
	    var username = req.auth.username;
		console.log('username is: ' + username);
	}
	
	Dog.findOne({dogName: req.query.dogNameParam}, function (err, dog) {
	    if (err) { return next(err) }
	    res.json(dog)
	  })
})
 

//Remove a dog from the database, based on unique ID of dog.  ID generated by Mongo
router.delete('/api/dog', function(req, res, next){
	
	if(null == req.auth){
		console.log('user is not logged in - need to redirect');
		return res.send(401);
	}else{
	    var username = req.auth.username;
		console.log('username is: ' + username);
	}
	
	Dog.remove({_id: req.query.dogIdParam}, function (err, dog) {
	    if (err) { return next(err) }
	    res.json(dog)
	  })
	
})




//Allows a new dog to be created - HTTP POST REQUEST
router.post('/api/dog', function(req, res, next){
	
	if(null == req.auth){
		console.log('user is not logged in - need to redirect');
		return res.send(401);
	}else{
	    var username = req.auth.username;
		console.log('username is: ' + username);
	}
	
	var dog = new Dog({
		dogName: req.body.dogName,
		dogBreed: req.body.dogBreed,
		hourlyRate: req.body.hourlyRate,
		ownerFirstName: req.body.ownerFirstName,
		ownerLastName: req.body.ownerLastName,
		dogDOB: req.body.dogDOB,
		dogStartDate: req.body.dogStartDate,
		dogPicture: req.body.dogPicture
	})
	
	dog.save(function(err, dog){
		if(err) {return next(err)}
		
		console.log('post received');
		console.log('Dog Name: ' + req.body.dogName)
		console.log('Owner First Name: '+ req.body.ownerFirstName)
		res.status(201).json(dog)
	})
})


//Allows a dog's walks to be updated - HTTP PUT REQUEST
router.put('/api/dog/walks:id', function(req, res, next){

	console.log('Inside the REST call with ID: ' + req.params.id);
	
	if(null == req.auth){
		console.log('user is not logged in - need to redirect');
		return res.send(401);
	}else{
	    var username = req.auth.username;
		console.log('username is: ' + username);
	}
	
	//The trick was using findByIdAndUpdate 
	//Just saves the walks, not the other bits
	Dog.findByIdAndUpdate(req.params.id, { $set: { walks: req.body.walks }}, function (err, tank) {
		  if (err) return next(err);
		  res.status(200).json(Dog);
		});
	
})


//Allows a dog's top level details to be updated - HTTP PUT REQUEST
router.put('/api/dog:id', function(req, res, next){

	console.log('Inside the REST call with ID: ' + req.params.id);
	
	if(null == req.auth){ 
		console.log('user is not logged in - need to redirect');
		return res.send(401);
	}else{
	    var username = req.auth.username;
		console.log('username is: ' + username);
	}
	
	//The trick was using findByIdAndUpdate 
	Dog.findByIdAndUpdate(req.params.id, { 
		dogName: req.body.dogName, 		
		dogBreed: req.body.dogBreed,
		hourlyRate: req.body.hourlyRate,
		ownerFirstName: req.body.ownerFirstName,
		ownerLastName: req.body.ownerLastName,
		dogDOB: req.body.dogDOB,
		dogStartDate: req.body.dogStartDate,
		dogPicture: req.body.dogPicture
		
	}, function (err, tank) {
		  if (err) return next(err);
		  res.status(200).json(Dog);
		});
	
})




//Added this as a placeholder function to start experimenting with cucumber.  My add_dog.steps.js expects a function
//Named getDogById to be available.  I need this for it to work.

getDogById = function(dogId){
	
	console.log('BEFORE call back initiate with: ' + dogId);
	
//	var dgToReturn = {dogName: 'Test', 
//        	ownerFirstName: 'Dog',
//        	ownerLastName: 'In-line',
//        	dogDOB: '01-02-2010',
//        	dogStartDate: '12-03-2014'};
//	
//	return dgToReturn;
	
	
	
	 Dog.findOne({dogName: 'Jasper'}, function (err, dog) {
		
		//The issue is that the wrapping function returns before this call back function
		//even starts to execute.  We're going to have to call back from within the callback??
		console.log('INSIDE call back with ' + dogId);
	    
		globalDog = dog;
		
		console.log('dog.dogName: ' + dog.dogName);
		console.log('globalDog.dogName: ' + globalDog.dogName);
	  });
	 
	
};

module.exports = router;

//How to export a function form a Javascript module (file).  
module.exports.getDogById = getDogById;



