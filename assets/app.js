angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(e){e.$on("login",function(o,t){e.currentUser=t})}]),angular.module("app").directive("moDateInput",["$window",function(e){return{require:"^ngModel",restrict:"A",link:function(o,t,n,r){var a=e.moment,l=n.moMediumDate;n.$observe("moDateInput",function(e){l!=e&&r.$modelValue&&(l=e,r.$modelValue=new Date(r.$setViewValue))}),r.$formatters.unshift(function(e){if(o=o,!l||!e)return"";var t=a(e).format(l);return t}),r.$parsers.unshift(function(e){o=o;var t=a(e,l);return t&&t.isValid()&&t.year()>1950?t.toDate():""})}}}]),angular.module("app").directive("moChangeProxy",["$parse",function(e){return console.log("Inside moChangeProxy"),{require:"^ngModel",restrict:"A",link:function(o,t,n,r){var a=n.moChangeProxy,l=n.ngModel;o.$watch(a,function(t){t!=r.$modelValue&&e(l).assign(o,t)}),t.bind("blur",function(){var t=o.$eval(a);r.$modelValue!=t&&o.$apply(function(){e(a).assign(o,r.$modelValue)})})}}}]),angular.module("app").controller("DogsCtrl",["$window","$scope","DogsSvc",function(e,o,t){t.fetch().success(function(e){console.log("Total Number of dogs is: "+e.length),o.dogs=e}).error(function(){console.log("An error occured, so redirecting to login page"),e.location.href="/#/login"})}]),angular.module("app").controller("CreateCtrl",["$window","$scope","DogCreationSvc",function(e,o,t){o.addDog=function(){console.log("Just adding a dog"),console.log("$scope.dogStartDate"+o.dogStartDate),o.dogName&&t.create({dogName:o.dogName,ownerFirstName:o.ownerFirstName,ownerLastName:o.ownerSurname,dogDOB:o.dogDOB,dogStartDate:o.dogStartDate,dogPicture:o.image}).success(function(o){e.location.href="/#/"}).error(function(){console.log("An error occured, so redirecting to login page"),e.location.href="/#/login"})}}]),angular.module("app").controller("UploadCtrl",["$scope",function(e){e.image=""}]).directive("myUpload",[function(){return{restrict:"A",link:function(e,o,t){var n=new FileReader;n.onload=function(o){e.image=o.target.result,e.$apply()},o.on("change",function(){n.readAsDataURL(o[0].files[0])})}}}]),angular.module("app").controller("EditCtrl",["$window","$location","$scope","DogsGetOneSvc","DogsUpdateSvc",function(e,o,t,n,r){var a=!1,l=o.search();n.fetch(l.dogName).success(function(e){t.dog=e}),t.addNewWalk=function(){a=!0;var e=t.dog.walks.walkArray.length,o=new Date;t.dog.walks.walkArray.push({walkDate:o,walkTime:"60"}),console.log("adding a new walk, now have: "+(e+1))},t.removeWalk=function(e){a=!0,console.log("Going to remove walk from list at position: "+e),t.dog.walks.walkArray.splice(e,1)},t.hasUpdatedWalk=function(){return a},t.getRowColour=function(){return 1==a?{"background-color":"pink"}:{color:"blue"}},t.saveWalks=function(){console.log("Need to save the walks for dog: "+t.dog.dogName),r.update(t.dog).success(function(e){t.dog=e}).success(function(o){e.location.href="/#/"})}}]),angular.module("app").controller("DeleteCtrl",["$location","$scope","DogsDeleteSvc",function(e,o,t){var n=e.search();t["delete"](n.dogId).success(function(e){o.dog=e})}]),angular.module("app").service("DogsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/dogs")}}]),angular.module("app").service("DogCreationSvc",["$http",function(e){this.create=function(o){return e.post("/api/dog",o)}}]),angular.module("app").service("DogsGetOneSvc",["$http",function(e){this.fetch=function(o){return console.log("Inside the angular service layer.  Have been asked to get dog: "+o),e({url:"/api/dog",method:"GET",params:{dogNameParam:o}})}}]),angular.module("app").service("DogsDeleteSvc",["$http",function(e){this["delete"]=function(o){return console.log("Inside the angular service layer.  Have been asked to delete dog: "+o),e({url:"/api/dog",method:"DELETE",params:{dogIdParam:o}})}}]),angular.module("app").service("DogsUpdateSvc",["$http",function(e){this.update=function(o){return console.log("Inside the angular service layer.  Have been asked to save dog: "+o.dogName),e({url:"/api/dog/"+o._id,method:"PUT",data:o})}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(e,o){var t=!1;e.login=function(t,n){o.login(t,n).then(function(o){e.$emit("login",o.data)})},e.getTextColour=function(){return 1==t?{"background-color":"pink"}:{"background-color":"white"}}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"DogsCtrl",templateUrl:"dogList.html"}).when("/createDog",{controller:"CreateCtrl",templateUrl:"dogCreation.html"}).when("/editDog",{controller:"EditCtrl",templateUrl:"dogEdit.html"}).when("/deleteDog",{controller:"DeleteCtrl",templateUrl:"dogList.html"}).when("/updateDog",{controller:"UpdateCtrl",templateUrl:"dogList.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(e){var o=this;o.getUser=function(){return e.get("/api/users")},o.login=function(t,n){return e.post("/api/sessions",{username:t,password:n}).then(function(t){return o.token=t.data,e.defaults.headers.common["X-Auth"]=t.data,o.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,