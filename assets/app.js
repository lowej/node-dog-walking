angular.module("app",["ngRoute"]),angular.module("app").controller("DogsCtrl",["$scope","DogsSvc",function(e,o){o.fetch().success(function(o){console.log("Total Number of dogs is: "+o.length),e.dogs=o})}]),angular.module("app").controller("CreateCtrl",["$window","$scope","DogCreationSvc",function(e,o,t){o.addDog=function(){console.log("Just adding a dog"),console.log("$scope.dogStartDate"+o.dogStartDate),o.dogName&&t.create({dogName:o.dogName,ownerFirstName:o.ownerFirstName,ownerLastName:o.ownerSurname,dogDOB:o.dogDOB,dogStartDate:o.dogStartDate,dogPicture:o.image}).success(function(o){e.location.href="/#/"})}}]),angular.module("app").controller("UploadCtrl",["$scope",function(e){e.image=""}]).directive("myUpload",[function(){return{restrict:"A",link:function(e,o,t){var a=new FileReader;a.onload=function(o){e.image=o.target.result,e.$apply()},o.on("change",function(){a.readAsDataURL(o[0].files[0])})}}}]),angular.module("app").controller("EditCtrl",["$location","$scope","DogsGetOneSvc",function(e,o,t){var a=e.search();t.fetch(a.dogName).success(function(e){o.dog=e})}]),angular.module("app").controller("DeleteCtrl",["$location","$scope","DogsDeleteSvc",function(e,o,t){var a=e.search();t["delete"](a.dogId).success(function(e){o.dog=e})}]),angular.module("app").service("DogsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/dogs")}}]),angular.module("app").service("DogCreationSvc",["$http",function(e){this.create=function(o){return e.post("/api/dog",o)}}]),angular.module("app").service("DogsGetOneSvc",["$http",function(e){this.fetch=function(o){return console.log("Inside the angular service layer.  Have been asked to get dog: "+o),e({url:"/api/dog",method:"GET",params:{dogNameParam:o}})}}]),angular.module("app").service("DogsDeleteSvc",["$http",function(e){this["delete"]=function(o){return console.log("Inside the angular service layer.  Have been asked to delete dog: "+o),e({url:"/api/dog",method:"DELETE",params:{dogIdParam:o}})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"DogsCtrl",templateUrl:"dogList.html"}).when("/createDog",{controller:"CreateCtrl",templateUrl:"dogCreation.html"}).when("/editDog",{controller:"EditCtrl",templateUrl:"dogEdit.html"}).when("/deleteDog",{controller:"DeleteCtrl",templateUrl:"dogList.html"})}]);
//# sourceMappingURL=data:application/json;base64,