angular.module("app",["ngRoute"]),angular.module("app").directive("moDateInput",["$window",function(e){return{require:"^ngModel",restrict:"A",link:function(o,t,a,n){var r=e.moment,l=a.moMediumDate;a.$observe("moDateInput",function(e){l!=e&&n.$modelValue&&(l=e,n.$modelValue=new Date(n.$setViewValue))}),n.$formatters.unshift(function(e){if(o=o,!l||!e)return"";var t=r(e).format(l);return t}),n.$parsers.unshift(function(e){o=o;var t=r(e,l);return t&&t.isValid()&&t.year()>1950?t.toDate():""})}}}]),angular.module("app").directive("moChangeProxy",["$parse",function(e){return console.log("Inside moChangeProxy"),{require:"^ngModel",restrict:"A",link:function(o,t,a,n){var r=a.moChangeProxy,l=a.ngModel;o.$watch(r,function(t){t!=n.$modelValue&&e(l).assign(o,t)}),t.bind("blur",function(){var t=o.$eval(r);n.$modelValue!=t&&o.$apply(function(){e(r).assign(o,n.$modelValue)})})}}}]),angular.module("app").controller("DogsCtrl",["$scope","DogsSvc",function(e,o){o.fetch().success(function(o){console.log("Total Number of dogs is: "+o.length),e.dogs=o})}]),angular.module("app").controller("CreateCtrl",["$window","$scope","DogCreationSvc",function(e,o,t){o.addDog=function(){console.log("Just adding a dog"),console.log("$scope.dogStartDate"+o.dogStartDate),o.dogName&&t.create({dogName:o.dogName,ownerFirstName:o.ownerFirstName,ownerLastName:o.ownerSurname,dogDOB:o.dogDOB,dogStartDate:o.dogStartDate,dogPicture:o.image}).success(function(o){e.location.href="/#/"})}}]),angular.module("app").controller("UploadCtrl",["$scope",function(e){e.image=""}]).directive("myUpload",[function(){return{restrict:"A",link:function(e,o,t){var a=new FileReader;a.onload=function(o){e.image=o.target.result,e.$apply()},o.on("change",function(){a.readAsDataURL(o[0].files[0])})}}}]),angular.module("app").controller("EditCtrl",["$window","$location","$scope","DogsGetOneSvc","DogsUpdateSvc",function(e,o,t,a,n){var r=!1,l=o.search();a.fetch(l.dogName).success(function(e){t.dog=e}),t.addNewWalk=function(){r=!0;var e=t.dog.walks.walkArray.length,o=new Date;t.dog.walks.walkArray.push({walkDate:o,walkTime:"60"}),console.log("adding a new walk, now have: "+(e+1))},t.removeWalk=function(e){r=!0,console.log("Going to remove walk from list at position: "+e),t.dog.walks.walkArray.splice(e,1)},t.hasUpdatedWalk=function(){return r},t.getRowColour=function(){return 1==r?{"background-color":"pink"}:{color:"blue"}},t.saveWalks=function(){console.log("Need to save the walks for dog: "+t.dog.dogName),n.update(t.dog).success(function(e){t.dog=e}).success(function(o){e.location.href="/#/"})}}]),angular.module("app").controller("DeleteCtrl",["$location","$scope","DogsDeleteSvc",function(e,o,t){var a=e.search();t["delete"](a.dogId).success(function(e){o.dog=e})}]),angular.module("app").service("DogsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/dogs")}}]),angular.module("app").service("DogCreationSvc",["$http",function(e){this.create=function(o){return e.post("/api/dog",o)}}]),angular.module("app").service("DogsGetOneSvc",["$http",function(e){this.fetch=function(o){return console.log("Inside the angular service layer.  Have been asked to get dog: "+o),e({url:"/api/dog",method:"GET",params:{dogNameParam:o}})}}]),angular.module("app").service("DogsDeleteSvc",["$http",function(e){this["delete"]=function(o){return console.log("Inside the angular service layer.  Have been asked to delete dog: "+o),e({url:"/api/dog",method:"DELETE",params:{dogIdParam:o}})}}]),angular.module("app").service("DogsUpdateSvc",["$http",function(e){this.update=function(o){return console.log("Inside the angular service layer.  Have been asked to save dog: "+o.dogName),e({url:"/api/dog/"+o._id,method:"PUT",data:o})}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"DogsCtrl",templateUrl:"dogList.html"}).when("/createDog",{controller:"CreateCtrl",templateUrl:"dogCreation.html"}).when("/editDog",{controller:"EditCtrl",templateUrl:"dogEdit.html"}).when("/deleteDog",{controller:"DeleteCtrl",templateUrl:"dogList.html"}).when("/updateDog",{controller:"UpdateCtrl",templateUrl:"dogList.html"})}]);
//# sourceMappingURL=data:application/json;base64,